---
# Docker Installation and Configuration for NexusTradeAI
# Optimized for high-performance trading applications

- name: Update package cache
  package:
    update_cache: yes
  become: yes

- name: Install required packages
  package:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - python3-pip
      - python3-setuptools
    state: present
  become: yes

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: yes

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
  become: yes

- name: Update package cache after adding Docker repo
  package:
    update_cache: yes
  become: yes

- name: Install Docker CE
  package:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  become: yes

- name: Install Docker Compose
  pip:
    name: docker-compose
    state: present
  become: yes

- name: Create docker group
  group:
    name: docker
    state: present
  become: yes

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  become: yes
  loop: "{{ docker_users | default(['ubuntu']) }}"

- name: Create Docker daemon configuration directory
  file:
    path: /etc/docker
    state: directory
    mode: '0755'
  become: yes

- name: Configure Docker daemon for high-performance trading
  copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "storage-opts": [
          "overlay2.override_kernel_check=true"
        ],
        "exec-opts": ["native.cgroupdriver=systemd"],
        "live-restore": true,
        "max-concurrent-downloads": 10,
        "max-concurrent-uploads": 5,
        "default-ulimits": {
          "memlock": {
            "Name": "memlock",
            "Hard": -1,
            "Soft": -1
          },
          "nofile": {
            "Name": "nofile",
            "Hard": 65536,
            "Soft": 65536
          }
        },
        "features": {
          "buildkit": true
        },
        "experimental": false,
        "metrics-addr": "0.0.0.0:9323",
        "registry-mirrors": [
          "{{ docker_registry_mirror | default('') }}"
        ],
        "insecure-registries": {{ docker_insecure_registries | default([]) | to_json }},
        "data-root": "{{ docker_data_root | default('/var/lib/docker') }}",
        "userland-proxy": false,
        "no-new-privileges": true,
        "seccomp-profile": "/etc/docker/seccomp.json",
        "apparmor-profile": "docker-default"
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  become: yes
  notify: restart docker

- name: Create Docker seccomp profile for security
  copy:
    content: |
      {
        "defaultAction": "SCMP_ACT_ERRNO",
        "archMap": [
          {
            "architecture": "SCMP_ARCH_X86_64",
            "subArchitectures": [
              "SCMP_ARCH_X86",
              "SCMP_ARCH_X32"
            ]
          }
        ],
        "syscalls": [
          {
            "names": [
              "accept",
              "accept4",
              "access",
              "adjtimex",
              "alarm",
              "bind",
              "brk",
              "capget",
              "capset",
              "chdir",
              "chmod",
              "chown",
              "chown32",
              "clock_getres",
              "clock_gettime",
              "clock_nanosleep",
              "close",
              "connect",
              "copy_file_range",
              "creat",
              "dup",
              "dup2",
              "dup3",
              "epoll_create",
              "epoll_create1",
              "epoll_ctl",
              "epoll_ctl_old",
              "epoll_pwait",
              "epoll_wait",
              "epoll_wait_old",
              "eventfd",
              "eventfd2",
              "execve",
              "execveat",
              "exit",
              "exit_group",
              "faccessat",
              "fadvise64",
              "fadvise64_64",
              "fallocate",
              "fanotify_mark",
              "fchdir",
              "fchmod",
              "fchmodat",
              "fchown",
              "fchown32",
              "fchownat",
              "fcntl",
              "fcntl64",
              "fdatasync",
              "fgetxattr",
              "flistxattr",
              "flock",
              "fork",
              "fremovexattr",
              "fsetxattr",
              "fstat",
              "fstat64",
              "fstatat64",
              "fstatfs",
              "fstatfs64",
              "fsync",
              "ftruncate",
              "ftruncate64",
              "futex",
              "futimesat",
              "getcpu",
              "getcwd",
              "getdents",
              "getdents64",
              "getegid",
              "getegid32",
              "geteuid",
              "geteuid32",
              "getgid",
              "getgid32",
              "getgroups",
              "getgroups32",
              "getitimer",
              "getpeername",
              "getpgid",
              "getpgrp",
              "getpid",
              "getppid",
              "getpriority",
              "getrandom",
              "getresgid",
              "getresgid32",
              "getresuid",
              "getresuid32",
              "getrlimit",
              "get_robust_list",
              "getrusage",
              "getsid",
              "getsockname",
              "getsockopt",
              "get_thread_area",
              "gettid",
              "gettimeofday",
              "getuid",
              "getuid32",
              "getxattr",
              "inotify_add_watch",
              "inotify_init",
              "inotify_init1",
              "inotify_rm_watch",
              "io_cancel",
              "ioctl",
              "io_destroy",
              "io_getevents",
              "ioprio_get",
              "ioprio_set",
              "io_setup",
              "io_submit",
              "ipc",
              "kill",
              "lchown",
              "lchown32",
              "lgetxattr",
              "link",
              "linkat",
              "listen",
              "listxattr",
              "llistxattr",
              "lremovexattr",
              "lseek",
              "lsetxattr",
              "lstat",
              "lstat64",
              "madvise",
              "memfd_create",
              "mincore",
              "mkdir",
              "mkdirat",
              "mknod",
              "mknodat",
              "mlock",
              "mlock2",
              "mlockall",
              "mmap",
              "mmap2",
              "mprotect",
              "mq_getsetattr",
              "mq_notify",
              "mq_open",
              "mq_timedreceive",
              "mq_timedsend",
              "mq_unlink",
              "mremap",
              "msgctl",
              "msgget",
              "msgrcv",
              "msgsnd",
              "msync",
              "munlock",
              "munlockall",
              "munmap",
              "nanosleep",
              "newfstatat",
              "_newselect",
              "open",
              "openat",
              "pause",
              "pipe",
              "pipe2",
              "poll",
              "ppoll",
              "prctl",
              "pread64",
              "preadv",
              "prlimit64",
              "pselect6",
              "ptrace",
              "pwrite64",
              "pwritev",
              "read",
              "readahead",
              "readlink",
              "readlinkat",
              "readv",
              "recv",
              "recvfrom",
              "recvmmsg",
              "recvmsg",
              "remap_file_pages",
              "removexattr",
              "rename",
              "renameat",
              "renameat2",
              "restart_syscall",
              "rmdir",
              "rt_sigaction",
              "rt_sigpending",
              "rt_sigprocmask",
              "rt_sigqueueinfo",
              "rt_sigreturn",
              "rt_sigsuspend",
              "rt_sigtimedwait",
              "rt_tgsigqueueinfo",
              "sched_getaffinity",
              "sched_getattr",
              "sched_getparam",
              "sched_get_priority_max",
              "sched_get_priority_min",
              "sched_getscheduler",
              "sched_rr_get_interval",
              "sched_setaffinity",
              "sched_setattr",
              "sched_setparam",
              "sched_setscheduler",
              "sched_yield",
              "seccomp",
              "select",
              "semctl",
              "semget",
              "semop",
              "semtimedop",
              "send",
              "sendfile",
              "sendfile64",
              "sendmmsg",
              "sendmsg",
              "sendto",
              "setfsgid",
              "setfsgid32",
              "setfsuid",
              "setfsuid32",
              "setgid",
              "setgid32",
              "setgroups",
              "setgroups32",
              "setitimer",
              "setpgid",
              "setpriority",
              "setregid",
              "setregid32",
              "setresgid",
              "setresgid32",
              "setresuid",
              "setresuid32",
              "setreuid",
              "setreuid32",
              "setrlimit",
              "set_robust_list",
              "setsid",
              "setsockopt",
              "set_thread_area",
              "set_tid_address",
              "setuid",
              "setuid32",
              "setxattr",
              "shmat",
              "shmctl",
              "shmdt",
              "shmget",
              "shutdown",
              "sigaltstack",
              "signalfd",
              "signalfd4",
              "sigreturn",
              "socket",
              "socketcall",
              "socketpair",
              "splice",
              "stat",
              "stat64",
              "statfs",
              "statfs64",
              "statx",
              "symlink",
              "symlinkat",
              "sync",
              "sync_file_range",
              "syncfs",
              "sysinfo",
              "syslog",
              "tee",
              "tgkill",
              "time",
              "timer_create",
              "timer_delete",
              "timerfd_create",
              "timerfd_gettime",
              "timerfd_settime",
              "timer_getoverrun",
              "timer_gettime",
              "timer_settime",
              "times",
              "tkill",
              "truncate",
              "truncate64",
              "ugetrlimit",
              "umask",
              "uname",
              "unlink",
              "unlinkat",
              "utime",
              "utimensat",
              "utimes",
              "vfork",
              "vmsplice",
              "wait4",
              "waitid",
              "waitpid",
              "write",
              "writev"
            ],
            "action": "SCMP_ACT_ALLOW"
          }
        ]
      }
    dest: /etc/docker/seccomp.json
    mode: '0644'
  become: yes

- name: Configure system limits for Docker
  copy:
    content: |
      # Docker limits for high-performance trading
      * soft nofile 65536
      * hard nofile 65536
      * soft nproc 65536
      * hard nproc 65536
      * soft memlock unlimited
      * hard memlock unlimited
      root soft nofile 65536
      root hard nofile 65536
      root soft nproc 65536
      root hard nproc 65536
      root soft memlock unlimited
      root hard memlock unlimited
    dest: /etc/security/limits.d/99-docker.conf
    mode: '0644'
  become: yes

- name: Configure sysctl for Docker performance
  copy:
    content: |
      # Network optimizations for Docker containers
      net.core.rmem_default = 262144
      net.core.rmem_max = 16777216
      net.core.wmem_default = 262144
      net.core.wmem_max = 16777216
      net.ipv4.tcp_rmem = 4096 65536 16777216
      net.ipv4.tcp_wmem = 4096 65536 16777216
      net.core.netdev_max_backlog = 5000
      net.ipv4.tcp_congestion_control = bbr
      
      # Memory management
      vm.swappiness = 1
      vm.dirty_ratio = 15
      vm.dirty_background_ratio = 5
      vm.max_map_count = 262144
      
      # File system
      fs.file-max = 2097152
      fs.inotify.max_user_watches = 524288
      fs.inotify.max_user_instances = 512
      
      # Process limits
      kernel.pid_max = 4194304
      kernel.threads-max = 4194304
    dest: /etc/sysctl.d/99-docker.conf
    mode: '0644'
  become: yes
  notify: reload sysctl

- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes

- name: Start and enable containerd service
  systemd:
    name: containerd
    state: started
    enabled: yes
  become: yes

- name: Install Docker monitoring tools
  pip:
    name:
      - docker
      - docker-compose
    state: present
  become: yes

- name: Create Docker monitoring script
  copy:
    content: |
      #!/bin/bash
      # Docker monitoring script for NexusTradeAI
      
      # Function to get Docker metrics
      get_docker_metrics() {
          echo "=== Docker System Info ==="
          docker system df
          echo ""
          
          echo "=== Running Containers ==="
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          echo ""
          
          echo "=== Container Resource Usage ==="
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
          echo ""
          
          echo "=== Docker Events (last 10) ==="
          docker events --since 1h --until now | tail -10
      }
      
      # Function to cleanup Docker
      cleanup_docker() {
          echo "Cleaning up Docker..."
          docker system prune -f
          docker volume prune -f
          docker network prune -f
      }
      
      case "$1" in
          metrics)
              get_docker_metrics
              ;;
          cleanup)
              cleanup_docker
              ;;
          *)
              echo "Usage: $0 {metrics|cleanup}"
              exit 1
              ;;
      esac
    dest: /usr/local/bin/docker-monitor.sh
    mode: '0755'
  become: yes

- name: Create Docker log rotation configuration
  copy:
    content: |
      /var/lib/docker/containers/*/*.log {
          rotate 7
          daily
          compress
          size=10M
          missingok
          delaycompress
          copytruncate
      }
    dest: /etc/logrotate.d/docker
    mode: '0644'
  become: yes

- name: Create Docker health check script
  copy:
    content: |
      #!/bin/bash
      # Docker health check script
      
      # Check Docker daemon
      if ! docker info >/dev/null 2>&1; then
          echo "ERROR: Docker daemon is not running"
          exit 1
      fi
      
      # Check Docker socket
      if [ ! -S /var/run/docker.sock ]; then
          echo "ERROR: Docker socket not found"
          exit 1
      fi
      
      # Check disk space
      DISK_USAGE=$(df /var/lib/docker | awk 'NR==2 {print $5}' | sed 's/%//')
      if [ "$DISK_USAGE" -gt 80 ]; then
          echo "WARNING: Docker disk usage is ${DISK_USAGE}%"
      fi
      
      # Check container health
      UNHEALTHY=$(docker ps --filter "health=unhealthy" -q | wc -l)
      if [ "$UNHEALTHY" -gt 0 ]; then
          echo "WARNING: $UNHEALTHY unhealthy containers found"
      fi
      
      echo "Docker health check passed"
    dest: /usr/local/bin/docker-health.sh
    mode: '0755'
  become: yes

- name: Create systemd service for Docker monitoring
  copy:
    content: |
      [Unit]
      Description=Docker Health Monitor
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/docker-health.sh
      User=root
      
      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/docker-health.service
    mode: '0644'
  become: yes

- name: Create systemd timer for Docker monitoring
  copy:
    content: |
      [Unit]
      Description=Run Docker Health Monitor every 5 minutes
      Requires=docker-health.service
      
      [Timer]
      OnCalendar=*:0/5
      Persistent=true
      
      [Install]
      WantedBy=timers.target
    dest: /etc/systemd/system/docker-health.timer
    mode: '0644'
  become: yes

- name: Enable and start Docker health monitoring
  systemd:
    name: docker-health.timer
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes

- name: Verify Docker installation
  command: docker --version
  register: docker_version
  changed_when: false

- name: Display Docker version
  debug:
    msg: "Docker installed successfully: {{ docker_version.stdout }}"
